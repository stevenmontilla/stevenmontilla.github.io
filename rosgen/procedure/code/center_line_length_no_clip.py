#!/usr/bin/env python3
#
##############################################################################
#
# MODULE:       model
#
# AUTHOR(S):    josephh
#
# PURPOSE:      Script generated by wxGUI Graphical Modeler.
#
# DATE:         Wed Mar 17 23:38:12 2021
#
##############################################################################

#%module
#% description: Script generated by wxGUI Graphical Modeler.
#%end
#%option
#% key: LinesSetOne1_input
#% description: Name of input vector map
#% required: yes
#% type: string
#% key_desc: name
#% answer: sbanks1@PERMANENT
#%end
#%option
#% key: LinesSetTwo2_input
#% description: Name of input vector map
#% required: yes
#% type: string
#% key_desc: name
#% answer: sbanks2@PERMANENT
#%end
#%option
#% key: LinesSetThree3_input
#% description: Name of input vector map
#% required: yes
#% type: string
#% key_desc: name
#% answer: sbanks3@PERMANENT
#%end
#%option
#% key: vextract11_overwrite
#% description: Allow output files to overwrite existing files
#% required: yes
#% type: string
#% options: True, False
#% guisection: Flags
#% answer: True
#%end
#%option
#% key: vextract11_output
#% description: Name for output vector map
#% required: yes
#% type: string
#% key_desc: name
#% answer: banksLine2
#%end

import sys
import os
import atexit

from grass.script import parser, run_command

def cleanup():
    pass

def main(options, flags):
    run_command("v.centerline",
                overwrite = True,
                input=options["LinesSetOne1_input"],
                output="cl1",
                vertices=100)

    run_command("v.centerline",
                overwrite = True,
                input=options["LinesSetTwo2_input"],
                output="cl2",
                vertices=100)

    run_command("v.centerline",
                overwrite = True,
                input=options["LinesSetThree3_input"],
                output="cl3",
                vertices=100)

    run_command("v.patch",
                overwrite = True,
                input="cl1,cl2,cl3",
                output="pl")

    run_command("v.category",
                overwrite = True,
                input="pl",
                layer="1",
                type="point,line,centroid,face",
                output="plc",
                option="add",
                cat=1,
                step=1)

    run_command("v.centerline",
                overwrite = True,
                input="plc",
                output="cl",
                vertices=100)

    run_command("v.category",
                overwrite = True,
                input="cl",
                layer="1",
                type="point,line,centroid,face",
                output="clc",
                option="add",
                cat=1,
                step=1)

    run_command("v.db.addtable",
                map="clc",
                layer=1,
                key="cat",
                columns="length double")

    run_command("v.to.db",
                overwrite = True,
                map="clc",
                layer="1",
                type="point,line,boundary,centroid",
                option="length",
                columns="length",
                units="meters",
                query_layer="1",
                separator="pipe")

    run_command("v.extract",
                overwrite = True,
                input="clc",
                layer="1",
                type="point,line,boundary,centroid,area,face",
                output=options["vextract11_output"],
                new=-1)

    return 0

def getParameterizedFlags(paramFlags, itemFlags):
    fl = ''
    for i in [key for key, value in paramFlags.iteritems() if value == 'True']:
        if i in itemFlags:
            fl += i[-1]

    return fl

if __name__ == "__main__":
    options, flags = parser()
    atexit.register(cleanup)
    sys.exit(main(options, flags))
